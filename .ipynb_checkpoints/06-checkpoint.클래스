{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e7c9879e-6a40-48b9-9354-aa9969c3d0b0",
   "metadata": {},
   "source": [
    "### 1. 클래스 정의하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f836201c-00ab-4adc-ad9a-836dbb337706",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c5703eda-a0bf-4d3c-8b5d-b8668936b898",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "브랜드=현대, 컬러=white\n",
      "현대 white\n",
      "자동차가 달립니다.\n",
      "자동차를 정지합니다.\n",
      "\n",
      "브랜드=BMW, 컬러=black\n",
      "BMW black\n",
      "자동차가 달립니다.\n",
      "자동차를 정지합니다.\n"
     ]
    }
   ],
   "source": [
    "class Car:\n",
    "    # 생성자: 객체를 생성할 때 실행되는 메소드 (속성 값을 초기화할 때 주로 사용)\n",
    "    def __init__(self, brand, color):\n",
    "        # 속성\n",
    "        self.brand = brand\n",
    "        self.color = color\n",
    "\n",
    "    # 메소드\n",
    "    def stop(self):\n",
    "        print('자동차를 정지합니다.')\n",
    "\n",
    "    def run(self):\n",
    "        print('자동차가 달립니다.')\n",
    "\n",
    "    # 객체 정보 출력용 메소드\n",
    "    def __str__(self):\n",
    "        return f'브랜드={self.brand}, 컬러={self.color}'\n",
    "\n",
    "# 자동차 객체 생성\n",
    "car1 = Car(\"현대\", \"white\")  # 생성자는 객체가 생성될 때 실행된다\n",
    "car2 = Car(\"BMW\", \"black\")\n",
    "\n",
    "# 자동차 메소드 실행\n",
    "print(car1)\n",
    "print(car1.brand, car1.color)\n",
    "car1.run()\n",
    "car1.stop()\n",
    "\n",
    "print()\n",
    "\n",
    "print(car2)\n",
    "print(car2.brand, car2.color)\n",
    "car2.run()\n",
    "car2.stop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e3b2298e-db52-473d-941c-d8b9b9963b5b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "7\n",
      "\n",
      "3\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "class Calculator:\n",
    "    # 생성자\n",
    "    def __init__(self):\n",
    "        self.result = 0 #속성\n",
    "\n",
    "    #메소드\n",
    "    def add(self, num):\n",
    "        self.result += num\n",
    "        return self.result\n",
    "\n",
    "\n",
    "cal1 = Calculator() #객체를 생성할때 생성자가 실행\n",
    "cal2 = Calculator()\n",
    "\n",
    "\n",
    "print(cal1.add(3)) \n",
    "print(cal1.add(4)) \n",
    "print()\n",
    "\n",
    "print(cal2.add(3))  \n",
    "print(cal2.add(7)) \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c7fab31-e0bb-47e6-84ba-5bcc7f0e4f9c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "841b9233-2436-4822-8958-7c00ab500075",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n",
      "2\n",
      "6\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "'FourCal' object has no attribute 'div'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[35], line 23\u001b[0m\n\u001b[0;32m     21\u001b[0m \u001b[38;5;28mprint\u001b[39m(a\u001b[38;5;241m.\u001b[39msecond)  \n\u001b[0;32m     22\u001b[0m \u001b[38;5;28mprint\u001b[39m(a\u001b[38;5;241m.\u001b[39madd()) \n\u001b[1;32m---> 23\u001b[0m \u001b[38;5;28mprint\u001b[39m(a\u001b[38;5;241m.\u001b[39mdiv())\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'FourCal' object has no attribute 'div'"
     ]
    }
   ],
   "source": [
    "class FourCal:\n",
    "    def __init__(self, first, second):  \n",
    "        self.first = first\n",
    "        self.second = second\n",
    "\n",
    "    def add(self):\n",
    "        result = self.first + self.second\n",
    "        return result\n",
    "\n",
    "    def mul(self):\n",
    "        result = self.first * self.second\n",
    "        return result\n",
    "\n",
    "    def sub(self):\n",
    "        result = self.first - self.second\n",
    "        return result\n",
    "\n",
    "\n",
    "a = FourCal(4, 2)\n",
    "print(a.first)  \n",
    "print(a.second)  \n",
    "print(a.add()) \n",
    "print(a.div())  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3840a8e8-8547-4eac-9f98-1617409e8700",
   "metadata": {},
   "source": [
    "#### 2.클래스의 상속"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "588dd1f9-b889-4207-a3df-69321d91815c",
   "metadata": {},
   "outputs": [],
   "source": [
    "class SafeFourCal(FourCal):"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
